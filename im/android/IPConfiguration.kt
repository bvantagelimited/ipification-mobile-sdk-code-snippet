package com.ipification.im

import android.net.Uri
import android.util.Base64
import java.security.SecureRandom

class IPConfiguration private constructor() {
    var VERSION = "2.1.2"
    var customUrls = false
    var AUTHORIZATION_URL: Uri? = null
    var ENV: IPEnvironment = IPEnvironment.PRODUCTION

    // IM configuration
    var IM_AUTO_MODE: Boolean = true
    var DEFAULT_SCOPE: String = "openid ip:phone"
    var IM_PRIORITY_APP_LIST = arrayOf("wa", "telegram", "viber")

    var STATE_LENGTH: Int = 16
    var debug = false

    // save state, URL
    var currentState = ""
    var currentUrl = ""

    /**
     * CLIENT_ID - unique identifier of the client that is generated by IPification and provided to the client in the onboarding process.
     */
    var CLIENT_ID: String = ""

    /**
     * REDIRECT_URI - this value can represent a wildcard URI and will be used to validate the provided redirect_uri in the request.
     */
    var REDIRECT_URI: Uri? = null

    private var AUTH_URL_STAGE =
        "https://stage.ipification.com/auth/realms/ipification/protocol/openid-connect/auth"
    private var AUTH_URL_LIVE =
        "https://api.ipification.com/auth/realms/ipification/protocol/openid-connect/auth"

    var AUTH_READ_TIMEOUT: Long = 10000
    var AUTH_CONNECT_TIMEOUT: Long = 10000


    fun generateState(): String {
        val sr = SecureRandom()
        val random = ByteArray(STATE_LENGTH)
        sr.nextBytes(random)
        var result = Base64.encodeToString(
            random,
            Base64.NO_WRAP or Base64.NO_PADDING or Base64.URL_SAFE
        )
        if (result.length > STATE_LENGTH) {
            result = result.substring(0, STATE_LENGTH)
        }
        return "im-sa-$result"
    }

    internal fun getAuthorizationUrl() : String{
        if (ENV == IPEnvironment.SANDBOX){
            return AUTH_URL_STAGE
        }
        return AUTH_URL_LIVE
    }
    private object Holder {
        val INSTANCE = IPConfiguration()
    }

    companion object {
        @JvmStatic
        fun getInstance(): IPConfiguration {
            return Holder.INSTANCE
        }
    }

}
